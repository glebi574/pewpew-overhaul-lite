
PPOL(ppol) - pewpew-overhail-lite ; v0.9

This is ppol, lite variant of ppo. This variant focuses on keeping main pewpew features, renaming and slightly changing them to optimize development process. ppol also adds new functions to simplify mesh development. Currently ppol is only compatible with singleplayer(as there are no way to create custom multiplayer levels).

To include ppol in your level, copy ppol folder in your level folder. In the beginning of the file, that is the entry point of your level, defined in manifest.json (usually level.lua), require ppol entry point:

require'/dynamic/ppol/.lua'

I assume, that you'll copy ppol folder directly in your level folder, but if you need to place it somewhere else, just modify ppo_require function in ppol\.lua so it returns the correct path of ppol files.

ppol includes some functions for debugging and testing. To not load them, create global variable PPO_NDEBUG before requiring ppol and set it to value other than nil.


### basic changes ###


require - now automatically wraps path, considering pewpew's need to use /dynamic/ and restriction to use only .lua file.

require'functions' -- similar to require'/dynamic/functions.lua'

print - now can also print fx values


### ppol ###


mpath(path) - wraps path as '/dynamic/' .. path .. '.lua'. All related functions now use this wrapper.

ppo_require(...) - requires all inputed paths. Automatically wraps them as 'ppol/' .. mpath(path). Usually you won't need to call this function, it is used by ppol to require its files.

make_color(r, g, b, a) - returns color. Inputs are rgba components of a color.

change_alpha(c, a) - returns color with alpha value changed to a new one. Inputs are color to be modified and new alpha value.

color_to_string(c) - returns string, representing color value, that can be used to color text in game. Input is color that needs to be converted.

emoji_error, emoji_warning, emoji_nice - set of emojis(strings), that can be used in console

PPOL_VERSION - current version of ppol


### debugging tools ###


debug_print_contents(arr) - prints every key-value pair, contained in table and amount of them. Sorts output by first letter.

get_memory_usage() - returns memory usage in KB and B

add_memory_print() - adds update callback which forces garbage collection cycle and prints amount of used memory every tick.

add_memory_warning() - checks if you're close to memory limit and automatically collects garbage


### fmath changes ###


fmath is removed

fmath.max_fixedpoint() -> FX_MAX - now value, not a function

fmath.random_fixedpoint(a, b) -> fx_random(a, b) - now input can vary. With no input returns random fx in range [0; 1]. With 1 argument returns random fx in range [0; a]. With 2 arguments returns random fx in range [a; b].

fmath.random_int(a, b) -> random(a, b)

fmath.sqrt(a) -> fx_sqrt(a)

fmath.from_fraction(a, b) - removed

fmath.to_int(a) -> to_int(a)

fmath.abs_fixedpoint(a) -> fx_abs(a)

fmath.to_fixedpoint(a) -> to_fx(a)

fmath.sincos(a) -> fx_sincos(a)

fmath.atan2(y, x) -> fx_atan2(y, x)

fmath.tau() -> FX_TAU - now value, not a function


all variables and functions:


FX_TAU - fx value of tau
FX_PI - fx value of pi
FX_MAX - maximum value of fx
FX_MIN - minimum value of fx(equal to -FX_MAX)
FX_E - fx value of exponent

fx_random(a, b)
random(a, b)
fx_sqrt(a)
fx_abs(a)
fx_sincos(a)
fx_sin(a)
fx_cos(a)
fx_atan2(y, x)
to_int(a)
to_fx(a)
abs(a)


### pewpew changes ###


pewpew is removed


pewpew.EntityType -> entity_type - all names are now lower case, so pewpew.EntityType.ASTEROID now can be accessed as entity_type.asteroid . Only name of CUSTOMIZABLE_ENTITY was changed: entity_type.custom .

pewpew.MothershipType -> mothership_type - doesn't use keys anymore, only indexes: pewpew.MothershipType.THREE_CORNERS now can be accessed as mothership_type[3] .

pewpew.CannonType -> cannon_type - all names are now lower case.

pewpew.CannonFrequency -> cannon_frequency - no 'FREQ' part, so pewpew.CannonFrequency.FREQ_30 now can be accessed as cannon_frequency._30 .

pewpew.BombType -> bomb_type - all names are now lower case.

pewpew.BonusType -> bonus_type - all names are now lower case.

pewpew.WeaponType -> weapon_type - all names are now lower case.

pewpew.AsteroidSize -> asteroid_size - all names are now lower case.


pewpew.print(str) - removed. Use print(...) instead, now it can print fx numbers.

pewpew.print_debug_info() - removed. Same can be achieved by collectgarbage()

pewpew.set_level_size(x, y) -> set_level_size(x, y) - now input can vary. With 1 argument, sets level size to x * x. With 2 arguments sets level size to x * y.

pewpew.add_wall(x1, y1, x2, y2) -> add_wall(x1, y1, x2, y2)

pewpew.remove_wall(id) -> remove_wall(id)

pewpew.add_update_callback(f) -> add_update_callback(f)

pewpew.get_number_of_players() - removed

pewpew.increase_score_of_player(i, v) -> increase_score(v)

pewpew.increase_score_streak_of_player(i, v) -> increase_score_streak(v)

pewpew.get_score_streak_level(i) -> get_score_streak_level()

pewpew.stop_game() -> stop_game()

pewpew.get_player_inputs(i) - removed. Information is automatically retrieved and stored in inputs table. See below.

pewpew.get_score_of_player(i) -> get_score()

pewpew.configure_player(i, param) -> configure_player(param)

pewpew.configure_player_hud(i, param) -> configure_hud_string(str) - original function only allows you to set 1 string in hud, so function arguments were simplified.

pewpew.get_player_configuration(i) - removed. New functions are implemented to replace this one, they will be described below.

pewpew.configure_player_ship_weapon(id, param) -> set_player_ship_weapon(id, frequency, cannon, duration) - if frequency isn't specified, it will be set to cannon_frequency._30 . If cannon type isn't specified, it will be set to cannon_type.single

pewpew.add_damage_to_player_ship(id, v) -> damage_player_ship(id, v)

pewpew.add_arrow_to_player_ship(ship_id, target_id, color) -> add_arrow(ship_id, target_id, color)

pewpew.remove_arrow_from_player_ship(ship_id, arrow_id) -> remove_arrow(ship_id, arrow_id)

pewpew.make_player_ship_transparent(id, duration) -> make_player_ship_transparent(id, duration)

pewpew.set_player_ship_speed(id, factor, offset, duration) -> set_player_ship_speed(id, factor, offset, duration)

pewpew.get_all_entities() -> get_all_entities()

pewpew.get_entities_colliding_with_disk(x, y, r) -> get_entities_in(x, y, r)

pewpew.get_entity_count(type) -> get_entity_count(type)

pewpew.get_entity_type(id) -> get_entity_type(id)

pewpew.play_ambient_sound(path, i) - removed. It was united with play_sound. See below.

pewpew.play_sound(path, i, x, y) -> play_sound(path, ...) - now input can vary:
  play_sound(path) plays ambient sound from file, described by path at index 0.
  play_sound(path, i) plays ambient sound from file, described by path at index i.
  play_sound(path, x, y) plays sound at (x; y) from file, described by path at index 0.
  play_sound(path, x, y, i) plays sound at (x; y) from file, described by path at index i.

pewpew.create_explosion(x, y, color, scale, particle_count) -> create_explosion(x, y, color, scale, particle_count)

pewpew.new_asteroid_with_size(x, y, size) - removed. It was united with new_asteroid. See below.

pewpew.new_asteroid(x, y) -> new_asteroid(x, y, size) - if size isn't specified, calls new_asteroid(), otherwise calls new_asteroid_with_size()

pewpew.new_baf(x, y, angle, speed, lifetime) -> new_baf(x, y, angle, speed, lifetime) - if lifetime isn't specified, it's set to -1

pewpew.new_baf_red(x, y, angle, speed, lifetime) -> new_baf_red(x, y, angle, speed, lifetime) - if lifetime isn't specified, it's set to -1

pewpew.new_baf_blue(x, y, angle, speed, lifetime) -> new_baf_blue(x, y, angle, speed, lifetime) - if lifetime isn't specified, it's set to -1

pewpew.new_bomb(x, y, type) -> new_bomb(x, y, type)

pewpew.new_bonus(x, y, type, param) -> new_bonus(x, y, type, param)

pewpew.new_crowder(x, y) -> new_crowder(x, y)

pewpew.new_floating_message(x, y, str, param) -> new_message(x, y, str, scale, duration, is_optional)

pewpew.new_customizable_entity(x, y) -> new_entity(x, y, v) - now allows you to set position interpolation on creation(if not specified, true)

pewpew.new_inertiac(x, y, acceleration, angle) -> new_inertiac(x, y, acceleration, angle)

pewpew.new_mothership(x, y, type, angle) -> new_mothership(x, y, type, angle)

pewpew.new_pointonium(x, y, v) -> new_pointonium(x, y, v)

pewpew.new_player_ship(x, y, i) -> new_player_ship(x, y)

pewpew.new_player_bullet(x, y, angle, i) -> new_player_bullet(x, y, angle)

pewpew.new_rolling_cube(x, y) -> new_rolling_cube(x, y)

pewpew.new_rolling_sphere(x, y, angle, speed) -> new_rolling_sphere(x, y, angle, speed)

pewpew.new_wary(x, y) -> new_wary(x, y)

pewpew.new_ufo(x, y, dx) -> new_ufo(x, y, dx)

pewpew.rolling_cube_set_enable_collisions_with_walls(id, v) -> rolling_cube_set_wall_collision(id, v) - if v isn't specified, sets it to true

pewpew.ufo_set_enable_collisions_with_walls(id, v) -> ufo_set_wall_collision(id, v) - if v isn't specified, sets it to true

pewpew.entity_get_position(id) -> entity_get_pos(id)

pewpew.entity_get_is_alive(id) -> entity_get_is_alive(id)

pewpew.entity_get_is_started_to_be_destroyed(id) -> entity_get_is_exploding(id)

pewpew.entity_set_position(id, x, y) -> entity_set_pos(id, x, y)

pewpew.entity_set_radius(id, r) -> entity_set_radius(id, r)

pewpew.entity_set_update_callback(id, f) -> entity_set_update_callback(id, f)

pewpew.entity_destroy(id) -> entity_destroy(id)

pewpew.entity_react_to_weapon(id, param) -> entity_react_to_weapon(id, weapon_type, x, y)

pewpew.customizable_entity_set_position_interpolation(id, v) - removed. Now it's called automatically on custom entity creation.

customizable_entity_set_flipping_meshes(id, path, i1, i2) - removed. It was united with entity_set_mesh. See below.

pewpew.customizable_entity_set_mesh(id, path, i) -> entity_set_mesh(id, path, ...) - now input can vary:
  entity_set_mesh(id, path) - sets mesh of custom entity specified by id to mesh in file, described by path at index 0
  entity_set_mesh(id, path, i) - sets mesh of custom entity specified by id to mesh in file, described by path at index i
  entity_set_mesh(id, path, i1, i2) - sets flipping meshes of custom entity specified by id to meshes in file, described by path at indexes i1 and i2

pewpew.customizable_entity_set_mesh_color(id, color) -> entity_set_mesh_color(id, color)

pewpew.customizable_entity_set_string(id, str) -> entity_set_string(id, str)

pewpew.customizable_entity_set_mesh_xyz(id, x, y, z) -> entity_set_mesh_xyz(id, x, y, z)

pewpew.customizable_entity_set_mesh_z(id, z) - removed

pewpew.customizable_entity_set_mesh_xyz_scale(id, x, y, z) - removed. It was united with entity_set_mesh_scale. See below.

pewpew.customizable_entity_set_mesh_scale(id, scale) -> entity_set_mesh_scale(id, ...) - now input can vary:
  entity_set_mesh_scale(id, v) - scales mesh by v
  entity_set_mesh_scale(id, x, y) - scales mesh by (x, y, 1fx)
  entity_set_mesh_scale(id, x, y, z) - scales mesh by (x, y, z)

pewpew.customizable_entity_set_mesh_angle(id, angle, x, y, z) -> entity_set_mesh_angle(id, angle, x, y, z)

pewpew.customizable_entity_skip_mesh_attributes_interpolation(id) - removed. Doesn't seem to work. If you want to skip incorrect interpolation during first 2 ticks of entity being created, just delay setting mesh to it by 2 ticks.

pewpew.customizable_entity_configure_music_response(id, param) -> entity_set_music_sync(id, param)

pewpew.customizable_entity_add_rotation_to_mesh(id, angle, x, y, z) -> entity_add_mesh_angle(id, angle, x, y, z)

pewpew.customizable_entity_set_visibility_radius(id, r) -> entity_set_render_radius(id, r)

pewpew.customizable_entity_configure_wall_collision(id, c, f) -> entity_set_wall_collision(id, c, f)

pewpew.customizable_entity_set_player_collision_callback(id, f) -> entity_set_player_collision(id, f)

pewpew.customizable_entity_set_weapon_collision_callback(id, f) -> entity_set_weapon_collision(id, f)

pewpew.customizable_entity_start_spawning(id, duration) -> entity_start_spawning(id, duration) - if duration isn't specified, it is set to 0

pewpew.customizable_entity_start_exploding(id, duration) -> entity_start_exploding(id, duration)


all variables and functions:


entity_type
mothership_type
cannon_type
cannon_frequency
bomb_type
bonus_type
weapon_type
asteroid_size

inputs - table, which stores player inputs. Stored values are:
  ma  - movement joystick angle
  md  - movement joystick distance
  sa  - shooting joystick angle
  sd  - shooting joystick distance
  mdx - movement joystick x offset
  mdy - movement joystick y offset
  sdx - shooting joystick x offset
  sdy - shooting joystick y offset

set_level_size(x, y)
add_wall(x1, y1, x2, y2)
remove_wall(id)
add_update_callback(f)
increase_score(v)
increase_score_streak(v)
get_score_streak_level()
stop_game()
get_score()
configure_player(param)
configure_hud_string(str)
set_player_ship_weapon(id, frequency, cannon, duration)
damage_player_ship(id, v)
add_arrow(ship_id, target_id, color)
remove_arrow(ship_id, arrow_id)
make_player_ship_transparent(id, duration)
set_player_ship_speed(id, factor, offset, duration)
get_all_entities()
get_entities_in(x, y, r)
get_entity_count(type)
get_entity_type(id)
play_sound(path, ...)
create_explosion(x, y, color, scale, particle_count)
new_asteroid(x, y, size)
new_baf(x, y, angle, speed, lifetime)
new_baf_red(x, y, angle, speed, lifetime)
new_baf_blue(x, y, angle, speed, lifetime)
new_bomb(x, y, type)
new_bonus(x, y, type, param)
new_crowder(x, y)
new_message(x, y, str, scale, duration, is_optional)
new_entity(x, y, v)
new_inertiac(x, y, acceleration, angle)
new_mothership(x, y, type, angle)
new_pointonium(x, y, v)
new_player_ship(x, y)
new_player_bullet(x, y, angle)
new_rolling_cube(x, y)
new_rolling_sphere(x, y, angle, speed)
new_wary(x, y)
new_ufo(x, y, dx)
rolling_cube_set_wall_collision(id, v)
ufo_set_wall_collision(id, v)
entity_get_pos(id)
entity_get_is_alive(id)
entity_get_is_exploding(id)
entity_set_pos(id, x, y)
entity_set_radius(id, r)
entity_set_update_callback(id, f)
entity_destroy(id)
entity_react_to_weapon(id, weapon_type, x, y)
entity_set_mesh(id, path, ...)
entity_set_mesh_color(id, color)
entity_set_string(id, str)
entity_set_mesh_xyz(id, x, y, z)
entity_set_mesh_scale(id, ...)
entity_set_mesh_angle(id, angle, x, y, z)
entity_set_music_sync(id, param)
entity_add_mesh_angle(id, angle, x, y, z)
entity_set_render_radius(id, r)
entity_set_wall_collision(id, c, f)
entity_set_player_collision(id, f)
entity_set_weapon_collision(id, f)
entity_start_spawning(id, duration)
entity_start_exploding(id, duration)

some new functions are added:

set_is_lost(v) - configures has_lost value of player configuration.

set_shield(v) - configures shield value of player configuration.

set_joystick_color(c1, c2) - configures move_joystick_color and shoot_joystick_color of player configuration.

set_camera_pos(x, y, z) - configures camera_x_override, camera_y_override and camera_distance values of player configuration. If z isn't specified, it's set to 0fx(in game it's 1000fx). If z is specified, fixes it, so it starts from 0fx, not 1000fx.

set_camera_z(z) - configures camera_distance value of player configuration. Fixes z, so it starts from 0fx, not 1000fx.

set_camera_angle(x) - configures camera_rotation_x_axis value of player configuration.

get_is_lost() - returns has_lost value of player configuration.

get_shield() - returns shield value of player configuration.

new_bonus_shield(x, y, shield, box_duration, callback) - creates new bonus with shield type and respective arguments.

new_bonus_weapon(x, y, cannon, frequency, weapon_duration, box_duration, callback) - creates new bonus with weapon type and respective arguments.

new_bonus_speed(x, y, speed_factor, speed_offset, speed_duration, box_duration, callback) - creates new bonus with speed type and respective arguments.

entity_change_pos(id, dx, dy) - changes position of entity, defined by id by dx and dy


### mesh environment ###


If you require ppol from mesh environment, pewpew replacements and other pewpew related features, added by ppol won't be loaded. Other features, specifically for meshes will be added instead.

math is removed - all its contents are moved to global environment with some changes:
type -> mtype
pi -> PI
huge -> INT_HUGE
mininteger -> INT_MIN
maxinteger -> INT_MAX

TAU
round(a)


In mesh environment ppol defines functions to optimize mesh creation. Also, meshes, defined by certain functions get access to built-in OOP methods.

def_mesh(...) - returns table with mesh. Such mesh has access to OOP methods. Inputs are:
  def_mesh() - creates empty mesh.
  def_mesh(v, s, c) - any combination of vertex, segment or color tables. nil values or lack of argument will be repaced by empty table.

def_meshes(n) - defines meshes table, using def_mesh(). Inputs are:
  def_meshes() - defines empty meshes table.
  def_meshes(n) - defines meshes table and inserts n meshes, defined by def_mesh().

get_vsc(v) - retrieves vertex, segment, color tables from mesh. Inputs are:
  get_vsc() - returns 3 empty tables.
  get_vsc(i) - returns components of mesh, stored in meshes table at index i
  get_vsc(mesh) - returns components of provided mesh

rotate_vector(x, y, z, rx, ry, rz) - rotates vector, specified by xyz coordinates by angles around corresponding axis: rx, ry, rz and returns coordinates of rotated vector.

rotate_mesh(mesh, rx, ry, rz) - uses previous function to rotate all vertexes in the mesh by corresponding angles.

add_colors(mesh, color, n) - inserts color, depending on contents of c n times. Function is mostly used by other ppol mesh functions, but can be used in other purposes. Inputs are:
  add_colors(mesh, color, n) - color is value, it will be inserted in mesh's color table n times.
  add_colors(mesh, color, n) - color is table, corresponding values from this table will be inserted in mesh's color table. n represents amount of such additions, which means n first colors from color table will be added.
  add_colors(mesh, color, n) - color is function, it will be called for values from 1 to n and its output will be added to mesh's color table.

add_lines(mesh, color, ...) - adds lines in mesh. color input is similar to add_colors(). Line will be added into mesh for every to values in ... Every value is a table, containing coordinates of 1 end of a line and every 2 such points will create new line.

add_polygon(mesh, color, ...) - adds closed polygon to mesh. Similar to previous function, but now every point is part of polygon and connected to the point which goes after or before it.

add_curve(mesh, color, ...) - adds set of consecutive lines to mesh. Similar to previous function, but first and last points aren't connected.

add_circle(mesh, color, offset, r, precision, rx, ry, rz) - adds circle, rotated by certain angle and moved by certain offset. color input is similar to add_colors(). r is radius and precision is amount of points in circle. offset is table that contains xyz offset of circle after it was rotated; if offset is nil, it won't be applied; otherwise it should be a table, containing xyz coordinates, representing offset; any coordinates that aren't presented will still be set to 0. rx, ry, rz represent rotation by corresponding axis; if corresponding value isn't presented, it will be set to 0.

copy_vertexes(v, mod) - copies vertex table and returns the copy. Inputs are:
  copy_vertexes(v) - copies vertex table and returns the copy.
  copy_vertexes(v, mod) - copies vertex table and returns the copy. mod should be a function, used to modify vertex coordinates and return them. Inputs to this function are current index of vertex in vertex table and vertex itself.

copy_segments(s) - copies segment table and returns the copy.

copy_colors(c) - copies color table and returns the copy.

insert_vertexes(from_v, to_v, mod) - inserts contents of vertex table in specified vertex table. mod input is similar to copy_vertexes().

insert_segments(from_s, to_s, index_offset) - inserts contents of segment table in specified segment table. For each value index_offset will be applied; if it isn't specified, it will be set to 0.

insert_colors(from_c, to_c) - inserts contents of color table in specified color table.

copy_mesh(mesh, modv) - copies provided mesh and returns the copy. New mesh has access to OOP methods. modv input is similar to copy_vertexes().

insert_mesh(from_mesh, to_mesh, modv) - inserts mesh in specified mesh. index offset is automatically applied. modv input is similar to copy_vertexes().


OOP methods of created meshes are based on functions, mentioned earlier:
mesh:get_vsc()
mesh:rotate(rx, ry, rz)
mesh:add_colors(c, n)
mesh:add_lines(c, ...)
mesh:add_polygon(c, ...)
mesh:add_curve(c, ...)
mesh:add_circle(c, offset, r, precision, rx, ry, rz)
mesh:copy_vertexes(mod) - copies respective table from this mesh
mesh:copy_segments()
mesh:copy_colors()
mesh:insert_vertexes(from_v, mod) - insert into respective table in this mesh
mesh:insert_segments(from_s, index_offset)
mesh:insert_colors(from_c)
mesh:copy(modv)
mesh:insert(from_mesh, modv)


all variables and functions:


PI
TAU
INT_HUGE
INT_MIN
INT_MAX

abs
acos
asin
atan
ceil
cos
deg
exp
tointeger
floor
fmod
ult
log
max
min
modf
rad
random
round
sin
sincos
sqrt
tan
mtype

def_mesh(...)
def_meshes(n)
get_vsc(v)
rotate_vector(x, y, z, rx, ry, rz)
rotate_mesh(mesh, rx, ry, rz)
add_colors(mesh, color, n)
add_lines(mesh, color, ...)
add_polygon(mesh, color, ...)
add_curve(mesh, color, ...)
add_circle(mesh, color, offset, r, precision, rx, ry, rz)
copy_vertexes(v, mod)
copy_segments(s)
copy_colors(c)
insert_vertexes(from_v, to_v, mod)
insert_segments(from_s, to_s, index_offset)
insert_colors(from_c, to_c)
copy_mesh(mesh, modv)
insert_mesh(from_mesh, to_mesh, modv)
